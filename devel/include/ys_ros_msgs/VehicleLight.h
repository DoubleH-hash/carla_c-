// Generated by gencpp from file ys_ros_msgs/VehicleLight.msg
// DO NOT EDIT!


#ifndef YS_ROS_MSGS_MESSAGE_VEHICLELIGHT_H
#define YS_ROS_MSGS_MESSAGE_VEHICLELIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ys_ros_msgs
{
template <class ContainerAllocator>
struct VehicleLight_
{
  typedef VehicleLight_<ContainerAllocator> Type;

  VehicleLight_()
    : header()
    , light(0)
    , voice(0)  {
    }
  VehicleLight_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , light(0)
    , voice(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _light_type;
  _light_type light;

   typedef int8_t _voice_type;
  _voice_type voice;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CloseAll_Light)
  #undef CloseAll_Light
#endif
#if defined(_WIN32) && defined(BIT_LOW_BEAM)
  #undef BIT_LOW_BEAM
#endif
#if defined(_WIN32) && defined(BIT_HIGH_BEAM)
  #undef BIT_HIGH_BEAM
#endif
#if defined(_WIN32) && defined(BIT_LEFT_TURN_LIGHT)
  #undef BIT_LEFT_TURN_LIGHT
#endif
#if defined(_WIN32) && defined(BIT_RIGHT_TURN_LIGHT)
  #undef BIT_RIGHT_TURN_LIGHT
#endif
#if defined(_WIN32) && defined(Harzad_Light)
  #undef Harzad_Light
#endif
#if defined(_WIN32) && defined(BIT_POS_LIGHT)
  #undef BIT_POS_LIGHT
#endif
#if defined(_WIN32) && defined(BIT_BRAKE_LIGHT)
  #undef BIT_BRAKE_LIGHT
#endif

  enum {
    CloseAll_Light = 0u,
    BIT_LOW_BEAM = 1u,
    BIT_HIGH_BEAM = 2u,
    BIT_LEFT_TURN_LIGHT = 3u,
    BIT_RIGHT_TURN_LIGHT = 4u,
    Harzad_Light = 5u,
    BIT_POS_LIGHT = 6u,
    BIT_BRAKE_LIGHT = 7u,
  };


  typedef boost::shared_ptr< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleLight_

typedef ::ys_ros_msgs::VehicleLight_<std::allocator<void> > VehicleLight;

typedef boost::shared_ptr< ::ys_ros_msgs::VehicleLight > VehicleLightPtr;
typedef boost::shared_ptr< ::ys_ros_msgs::VehicleLight const> VehicleLightConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ys_ros_msgs::VehicleLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ys_ros_msgs::VehicleLight_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::VehicleLight_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.light == rhs.light &&
    lhs.voice == rhs.voice;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ys_ros_msgs::VehicleLight_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::VehicleLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ys_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f9cc22bad4d7682f9155deefd937ce7";
  }

  static const char* value(const ::ys_ros_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f9cc22bad4d7682ULL;
  static const uint64_t static_value2 = 0xf9155deefd937ce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ys_ros_msgs/VehicleLight";
  }

  static const char* value(const ::ys_ros_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# b'xxxxxxx1 low_beam\n"
"# b'xxxxxx1x high_beam\n"
"# b'xxxxx1xx pos_light\n"
"# b'xxxx1xxx left_turn_light\n"
"# b'xxx1xxxx right_turn_light\n"
"# b'xx1xxxxx brake_light\n"
"int8 light\n"
"\n"
"uint8 CloseAll_Light=0\n"
"uint8 BIT_LOW_BEAM=1\n"
"uint8 BIT_HIGH_BEAM=2\n"
"uint8 BIT_LEFT_TURN_LIGHT=3\n"
"uint8 BIT_RIGHT_TURN_LIGHT=4\n"
"uint8 Harzad_Light=5\n"
"uint8 BIT_POS_LIGHT=6\n"
"uint8 BIT_BRAKE_LIGHT=7\n"
"\n"
"int8 voice\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ys_ros_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.light);
      stream.next(m.voice);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ys_ros_msgs::VehicleLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ys_ros_msgs::VehicleLight_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "light: ";
    Printer<int8_t>::stream(s, indent + "  ", v.light);
    s << indent << "voice: ";
    Printer<int8_t>::stream(s, indent + "  ", v.voice);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YS_ROS_MSGS_MESSAGE_VEHICLELIGHT_H
