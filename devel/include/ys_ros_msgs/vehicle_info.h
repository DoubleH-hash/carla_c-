// Generated by gencpp from file ys_ros_msgs/vehicle_info.msg
// DO NOT EDIT!


#ifndef YS_ROS_MSGS_MESSAGE_VEHICLE_INFO_H
#define YS_ROS_MSGS_MESSAGE_VEHICLE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ys_ros_msgs
{
template <class ContainerAllocator>
struct vehicle_info_
{
  typedef vehicle_info_<ContainerAllocator> Type;

  vehicle_info_()
    : header()
    , CCU_ShiftLevel_Sts(0)
    , CCU_P_Sts(0)
    , CCU_Ignition_Sts(0)
    , Steering_Wheel_Direction(0)
    , CCU_Steering_Wheel_Angle(0)
    , CCU_Vehicle_Speed(0)
    , CCU_Drive_Mode(0)
    , Total_Odometer(0)
    , Left_Front_Wheel_Speed(0)
    , Left_Back_Wheel_Speed(0)
    , Right_Front_Wheel_Speed(0)
    , Right_Back_Wheel_Speed(0)
    , Wheel_Transform_Vehicle_Speed(0.0)
    , Angular_Speed(0.0)  {
    }
  vehicle_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CCU_ShiftLevel_Sts(0)
    , CCU_P_Sts(0)
    , CCU_Ignition_Sts(0)
    , Steering_Wheel_Direction(0)
    , CCU_Steering_Wheel_Angle(0)
    , CCU_Vehicle_Speed(0)
    , CCU_Drive_Mode(0)
    , Total_Odometer(0)
    , Left_Front_Wheel_Speed(0)
    , Left_Back_Wheel_Speed(0)
    , Right_Front_Wheel_Speed(0)
    , Right_Back_Wheel_Speed(0)
    , Wheel_Transform_Vehicle_Speed(0.0)
    , Angular_Speed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _CCU_ShiftLevel_Sts_type;
  _CCU_ShiftLevel_Sts_type CCU_ShiftLevel_Sts;

   typedef uint8_t _CCU_P_Sts_type;
  _CCU_P_Sts_type CCU_P_Sts;

   typedef uint8_t _CCU_Ignition_Sts_type;
  _CCU_Ignition_Sts_type CCU_Ignition_Sts;

   typedef uint8_t _Steering_Wheel_Direction_type;
  _Steering_Wheel_Direction_type Steering_Wheel_Direction;

   typedef uint16_t _CCU_Steering_Wheel_Angle_type;
  _CCU_Steering_Wheel_Angle_type CCU_Steering_Wheel_Angle;

   typedef uint16_t _CCU_Vehicle_Speed_type;
  _CCU_Vehicle_Speed_type CCU_Vehicle_Speed;

   typedef uint8_t _CCU_Drive_Mode_type;
  _CCU_Drive_Mode_type CCU_Drive_Mode;

   typedef uint32_t _Total_Odometer_type;
  _Total_Odometer_type Total_Odometer;

   typedef int16_t _Left_Front_Wheel_Speed_type;
  _Left_Front_Wheel_Speed_type Left_Front_Wheel_Speed;

   typedef int16_t _Left_Back_Wheel_Speed_type;
  _Left_Back_Wheel_Speed_type Left_Back_Wheel_Speed;

   typedef int16_t _Right_Front_Wheel_Speed_type;
  _Right_Front_Wheel_Speed_type Right_Front_Wheel_Speed;

   typedef int16_t _Right_Back_Wheel_Speed_type;
  _Right_Back_Wheel_Speed_type Right_Back_Wheel_Speed;

   typedef double _Wheel_Transform_Vehicle_Speed_type;
  _Wheel_Transform_Vehicle_Speed_type Wheel_Transform_Vehicle_Speed;

   typedef double _Angular_Speed_type;
  _Angular_Speed_type Angular_Speed;





  typedef boost::shared_ptr< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_info_

typedef ::ys_ros_msgs::vehicle_info_<std::allocator<void> > vehicle_info;

typedef boost::shared_ptr< ::ys_ros_msgs::vehicle_info > vehicle_infoPtr;
typedef boost::shared_ptr< ::ys_ros_msgs::vehicle_info const> vehicle_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ys_ros_msgs::vehicle_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ys_ros_msgs::vehicle_info_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::vehicle_info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.CCU_ShiftLevel_Sts == rhs.CCU_ShiftLevel_Sts &&
    lhs.CCU_P_Sts == rhs.CCU_P_Sts &&
    lhs.CCU_Ignition_Sts == rhs.CCU_Ignition_Sts &&
    lhs.Steering_Wheel_Direction == rhs.Steering_Wheel_Direction &&
    lhs.CCU_Steering_Wheel_Angle == rhs.CCU_Steering_Wheel_Angle &&
    lhs.CCU_Vehicle_Speed == rhs.CCU_Vehicle_Speed &&
    lhs.CCU_Drive_Mode == rhs.CCU_Drive_Mode &&
    lhs.Total_Odometer == rhs.Total_Odometer &&
    lhs.Left_Front_Wheel_Speed == rhs.Left_Front_Wheel_Speed &&
    lhs.Left_Back_Wheel_Speed == rhs.Left_Back_Wheel_Speed &&
    lhs.Right_Front_Wheel_Speed == rhs.Right_Front_Wheel_Speed &&
    lhs.Right_Back_Wheel_Speed == rhs.Right_Back_Wheel_Speed &&
    lhs.Wheel_Transform_Vehicle_Speed == rhs.Wheel_Transform_Vehicle_Speed &&
    lhs.Angular_Speed == rhs.Angular_Speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ys_ros_msgs::vehicle_info_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::vehicle_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ys_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "117735f8501d259f661f2cb5a60954db";
  }

  static const char* value(const ::ys_ros_msgs::vehicle_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x117735f8501d259fULL;
  static const uint64_t static_value2 = 0x661f2cb5a60954dbULL;
};

template<class ContainerAllocator>
struct DataType< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ys_ros_msgs/vehicle_info";
  }

  static const char* value(const ::ys_ros_msgs::vehicle_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 CCU_ShiftLevel_Sts   # 档位  P=1（停车） R=2 倒档 N=3（空挡）  D=4（前进）\n"
"uint8 CCU_P_Sts   # P档状态\n"
"uint8 CCU_Ignition_Sts  # 点火开关状态\n"
"uint8 Steering_Wheel_Direction  # 方向盘方向\n"
"uint16 CCU_Steering_Wheel_Angle  # 转向角度\n"
"uint16 CCU_Vehicle_Speed  # 实时车速\n"
"uint8 CCU_Drive_Mode  # 驾驶模式\n"
"uint32 Total_Odometer  # 累计里程\n"
"int16 Left_Front_Wheel_Speed\n"
"int16 Left_Back_Wheel_Speed\n"
"int16 Right_Front_Wheel_Speed\n"
"int16 Right_Back_Wheel_Speed\n"
"float64 Wheel_Transform_Vehicle_Speed\n"
"float64 Angular_Speed\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ys_ros_msgs::vehicle_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CCU_ShiftLevel_Sts);
      stream.next(m.CCU_P_Sts);
      stream.next(m.CCU_Ignition_Sts);
      stream.next(m.Steering_Wheel_Direction);
      stream.next(m.CCU_Steering_Wheel_Angle);
      stream.next(m.CCU_Vehicle_Speed);
      stream.next(m.CCU_Drive_Mode);
      stream.next(m.Total_Odometer);
      stream.next(m.Left_Front_Wheel_Speed);
      stream.next(m.Left_Back_Wheel_Speed);
      stream.next(m.Right_Front_Wheel_Speed);
      stream.next(m.Right_Back_Wheel_Speed);
      stream.next(m.Wheel_Transform_Vehicle_Speed);
      stream.next(m.Angular_Speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ys_ros_msgs::vehicle_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ys_ros_msgs::vehicle_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CCU_ShiftLevel_Sts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CCU_ShiftLevel_Sts);
    s << indent << "CCU_P_Sts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CCU_P_Sts);
    s << indent << "CCU_Ignition_Sts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CCU_Ignition_Sts);
    s << indent << "Steering_Wheel_Direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Steering_Wheel_Direction);
    s << indent << "CCU_Steering_Wheel_Angle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CCU_Steering_Wheel_Angle);
    s << indent << "CCU_Vehicle_Speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CCU_Vehicle_Speed);
    s << indent << "CCU_Drive_Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CCU_Drive_Mode);
    s << indent << "Total_Odometer: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Total_Odometer);
    s << indent << "Left_Front_Wheel_Speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Left_Front_Wheel_Speed);
    s << indent << "Left_Back_Wheel_Speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Left_Back_Wheel_Speed);
    s << indent << "Right_Front_Wheel_Speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Right_Front_Wheel_Speed);
    s << indent << "Right_Back_Wheel_Speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Right_Back_Wheel_Speed);
    s << indent << "Wheel_Transform_Vehicle_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Wheel_Transform_Vehicle_Speed);
    s << indent << "Angular_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Angular_Speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YS_ROS_MSGS_MESSAGE_VEHICLE_INFO_H
