// Generated by gencpp from file ys_ros_msgs/switchLaneRequest.msg
// DO NOT EDIT!


#ifndef YS_ROS_MSGS_MESSAGE_SWITCHLANEREQUEST_H
#define YS_ROS_MSGS_MESSAGE_SWITCHLANEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ys_ros_msgs
{
template <class ContainerAllocator>
struct switchLaneRequest_
{
  typedef switchLaneRequest_<ContainerAllocator> Type;

  switchLaneRequest_()
    : lane_id(0)  {
    }
  switchLaneRequest_(const ContainerAllocator& _alloc)
    : lane_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;





  typedef boost::shared_ptr< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct switchLaneRequest_

typedef ::ys_ros_msgs::switchLaneRequest_<std::allocator<void> > switchLaneRequest;

typedef boost::shared_ptr< ::ys_ros_msgs::switchLaneRequest > switchLaneRequestPtr;
typedef boost::shared_ptr< ::ys_ros_msgs::switchLaneRequest const> switchLaneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.lane_id == rhs.lane_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ys_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22a16463d225f98d2cfa8fbcee744904";
  }

  static const char* value(const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22a16463d225f98dULL;
  static const uint64_t static_value2 = 0x2cfa8fbcee744904ULL;
};

template<class ContainerAllocator>
struct DataType< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ys_ros_msgs/switchLaneRequest";
  }

  static const char* value(const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 lane_id\n"
;
  }

  static const char* value(const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct switchLaneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ys_ros_msgs::switchLaneRequest_<ContainerAllocator>& v)
  {
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YS_ROS_MSGS_MESSAGE_SWITCHLANEREQUEST_H
