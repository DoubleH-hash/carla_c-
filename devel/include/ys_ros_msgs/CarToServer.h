// Generated by gencpp from file ys_ros_msgs/CarToServer.msg
// DO NOT EDIT!


#ifndef YS_ROS_MSGS_MESSAGE_CARTOSERVER_H
#define YS_ROS_MSGS_MESSAGE_CARTOSERVER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ys_ros_msgs
{
template <class ContainerAllocator>
struct CarToServer_
{
  typedef CarToServer_<ContainerAllocator> Type;

  CarToServer_()
    : header()
    , curMisStatus(0)
    , curToStartDis(0.0)
    , curToEndDis(0.0)
    , failure(0)  {
    }
  CarToServer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , curMisStatus(0)
    , curToStartDis(0.0)
    , curToEndDis(0.0)
    , failure(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _curMisStatus_type;
  _curMisStatus_type curMisStatus;

   typedef double _curToStartDis_type;
  _curToStartDis_type curToStartDis;

   typedef double _curToEndDis_type;
  _curToEndDis_type curToEndDis;

   typedef int8_t _failure_type;
  _failure_type failure;





  typedef boost::shared_ptr< ::ys_ros_msgs::CarToServer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ys_ros_msgs::CarToServer_<ContainerAllocator> const> ConstPtr;

}; // struct CarToServer_

typedef ::ys_ros_msgs::CarToServer_<std::allocator<void> > CarToServer;

typedef boost::shared_ptr< ::ys_ros_msgs::CarToServer > CarToServerPtr;
typedef boost::shared_ptr< ::ys_ros_msgs::CarToServer const> CarToServerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ys_ros_msgs::CarToServer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ys_ros_msgs::CarToServer_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::CarToServer_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.curMisStatus == rhs.curMisStatus &&
    lhs.curToStartDis == rhs.curToStartDis &&
    lhs.curToEndDis == rhs.curToEndDis &&
    lhs.failure == rhs.failure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ys_ros_msgs::CarToServer_<ContainerAllocator1> & lhs, const ::ys_ros_msgs::CarToServer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ys_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ys_ros_msgs::CarToServer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ys_ros_msgs::CarToServer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ys_ros_msgs::CarToServer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdaf2bbe69c52e67fbea6c48be673f0c";
  }

  static const char* value(const ::ys_ros_msgs::CarToServer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdaf2bbe69c52e67ULL;
  static const uint64_t static_value2 = 0xfbea6c48be673f0cULL;
};

template<class ContainerAllocator>
struct DataType< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ys_ros_msgs/CarToServer";
  }

  static const char* value(const ::ys_ros_msgs::CarToServer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# int8  taskStatus   #0:wait,1:drivingï¼Œ2:arrive,\n"
"# bool bWaitStation  # true:wait for go to station,false:not wait for go to station\n"
"# int8  taskCancelStatus  #0:normal,1:task cancel finished,2:task cancel failed\n"
"# bool bGoOutStation #true in out station point ,false not in out station point\n"
"int8 curMisStatus #0:normal,1:enter in station,2:arrive station,3:go out station\n"
"float64 curToStartDis\n"
"float64 curToEndDis\n"
"int8 failure #0--normal,1--no map,2--have Obstacle,3--too far;4\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ys_ros_msgs::CarToServer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.curMisStatus);
      stream.next(m.curToStartDis);
      stream.next(m.curToEndDis);
      stream.next(m.failure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarToServer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ys_ros_msgs::CarToServer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ys_ros_msgs::CarToServer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "curMisStatus: ";
    Printer<int8_t>::stream(s, indent + "  ", v.curMisStatus);
    s << indent << "curToStartDis: ";
    Printer<double>::stream(s, indent + "  ", v.curToStartDis);
    s << indent << "curToEndDis: ";
    Printer<double>::stream(s, indent + "  ", v.curToEndDis);
    s << indent << "failure: ";
    Printer<int8_t>::stream(s, indent + "  ", v.failure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YS_ROS_MSGS_MESSAGE_CARTOSERVER_H
